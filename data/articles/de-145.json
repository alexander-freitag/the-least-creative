{
    "title": ".NET 9.0 Preview 5 liefert Verbesserungen für Blazor",
    "timestamp": "2024-06-12T15:26:00Z",
    "content": "\n\n\n        Blazor Server bietet verbessertes Wiederherstellen von Verbindungen, einen optimierten Download statischer Ressourcen und leichteres Abfragen des Render-Modus.\n      \n\n      (Bild: Pincasso/Shutterstock.com)\n    \nMicrosoft hat die fünfte Vorschauversion von .NET 9.0 zum Download bereitgestellt. Entwicklerinnen und Entwickler können nun den Render-Modus bei Blazor-Anwendungen leichter abfragen. Der Blazor Server bietet ein verbessertes Benutzererlebnis beim Wiederherstellen von Verbindungen und der Download statischer Ressourcen wurde optimiert. Darüber hinaus hat Microsoft ein Update der Visual Studio-Version 17.11 auf Preview 2 veröffentlicht.\nEinen größeren Fortschritt gibt es in Blazor Server beim Wiederherstellen von Verbindungen. Blazor Server ist eine Variante von Blazor, bei der die Benutzeroberfläche auf dem Webserver erzeugt und mit einem kontinuierlichen Datenaustausch per Websockets so zum Webbrowser übertragen wird, dass der Benutzer das Erlebnis einer Single-Page-App (SPA) erhält – mit Ausnahme der Offline-Fähigkeit, die es bei Blazor Server nicht geben kann.\nMicrosoft bietet in .NET 9.0 nicht nur eine Überarbeitung der Anzeige beim Verbindungsverlust (siehe Abbildung 1), sondern auch Verbesserungen beim Wiederherstellen der Verbindung. Diese wird nun automatisch wieder aufgenommen, wenn der Benutzer zu einem Browser-Tab zurücknavigiert. Zudem verwendet Microsoft für das Wiederherstellen einer Verbindung nicht mehr Versuche mit linearen, sondern exponentielle Intervalle. Dies lässt sich konfigurieren, wie in Listing 1 zu sehen.\nFalls eine Verbindung nicht wiederhergestellt werden kann, weil Blazor Server den Zustand auf dem Webserver bereits verworfen hat oder der Webserverprozess neu gestartet wurde (z.B. beim Austausch des Programmcodes), führt der Browser automatisch ein komplettes Neuladen der Anwendung aus. Das mussten Benutzer bisher manuell anstoßen.\nWenn ein Neuladen der Seiten erfolgen muss, gehen weiterhin der Zustand der Anwendung und alle Formulareingaben des Benutzers verloren. Microsoft präsentierte aber auf der diesjährigen Build-Konferenz im Vortrag \"Modern Full-Stack Web Development with ASP.NET Core & Blazor\" einen bisher nicht veröffentlichten Prototyp eines neuen Tags <StatefulReconnection> in der App.razor-Datei, mit der bei Blazor Server zumindest die aktuellen Formulareingaben des Benutzers beim Neuladen erhalten bleiben.\n\n\n\n      (Bild: Screenshot auf Windows 11: Holger Schwichtenberg)\n    \nFolgendes Listing von Microsoft zeigt die Konfiguration der Intervalle für die Verbindungsversuche bei Blazor Server:\nSeit .NET 8.0 gibt es bei Blazor basierten Browseranwendungen nicht nur die Render-Modi Blazor Server und Blazor WebAssembly, sondern auch Static Server-Side-Rendering und den Auto-Modus, der von Static Server-Side-Rendering zu Blazor Server und Blazor Server zu Blazor WebAssembly umschalten kann. Bisher war es für Entwicklerinnen und Entwickler nur sehr umständlich möglich zu ermitteln, in welchem Modus Blazor gerade rendert.\nIn .NET 9.0 Preview 5 bietet Microsoft nun in der Basisklasse ComponentBase für alle Razor Components die Eigenschaften Platform mit den Werten Name (string) und IsInteractive (bool) an. Mögliche Zeichenketten bei der Eigenschaft Name sind:\nZudem können Entwicklerinnen und Entwickler über die Eigenschaft AssignedRenderMode innerhalb einer Komponente auslesen, welcher Render-Modus folgen wird. Beispiele dazu zeigen die Abbildung 2 bis 5.\nMicrosoft hat aber auf GitHub bereits angekündigt, die Eigenschaft Platform in folgenden Preview-Versionen noch in RenderInfo umzubenennen.\n\n\n\n\n\n\n\n\nIn .NET 9.0 hat Microsoft das Ausliefern von statischen Webressourcen wie CSS-Dateien, JavaScript-Dateien, Grafiken und Videos optimiert. Die neue Konfigurationsmethode MapStaticAssets() anstelle der bisherigen UseStaticFiles() sorgt für eine Komprimierung (s. Abbildung 6) und das Einfügen von E-Tags mit SHA-256-Hash zur Versionierung von Ressourcen. Damit kann ein Browser erkennen, ob eine Datei in seinem Cache veraltet ist (siehe Abbildung 7).\n\n\n\n\nAb .NET 9.0 Preview 5 liefert Microsoft eine neue Projektvorlage \".NET MAUI Blazor Hybrid and Web App\" (siehe Abbildung 8). An der Kommandozeile heißt die Vorlage \"maui-blazor-web\". Die neue Vorlage erstellt sowohl eine Blazor-Webanwendung (wobei der Render-Modus zwischen \"Static\", \"Server\", \"WebAssembly\" und \"Auto\" wählbar ist) als auch eine Blazor MAUI-Anwendung. Bei der Auswahl \"Auto\" entstehen insgesamt die vier in Abbildung 9 gezeigten Projekte:\n\n\n\n\nFür Blazor-basierte Anwendungen steht nun eine einfachere Möglichkeit parat, den serverseitigen Authentifizierungszustand an Blazor WebAssembly im Browser zu übergeben. Dafür gibt es die neue Methode AddAuthenticationStateSerialization() für den Server und AddAuthenticationStateDeserialization() für den Client. Sie sind jeweils im Startcode in Program.cs aufzurufen. Standardmäßig werden dabei der Name und die Rollen des authentifizierten Benutzers per HTML-Kommentar (<!--Blazor-WebAssembly-Component-State:eyJfX2ludGVybmFsX19BdXRoZW50aWNhdGlvb… -->) vom Server zum Browser übergeben. Optional können Entwicklerinnen und Entwickler auch alle Claims so übergeben:\nBei Entity Framework Core gibt es in Preview 5 nur ein paar kleinere Neuerungen. Der Objekt-Relationale Mapper (ORM) kann nun die .NET-Methoden TimeOnly.FromDateTime() und TimeOnly.FromTimeSpan() in LINQ-Abfragen in SQL übersetzen. Vergleiche mit Count != 0 und Count > 0 übersetzt Entity Framework Core nun in SQL mithilfe von EXISTS statt COUNT, beispielsweise aus folgender LINQ-Abfrage\nwird diese SQL-Abfrage:\nÜber 60 Methoden der .NET-Basisklassenbibliothek, die Parameter-Arrays entgegennehmen, haben nun auch eine Überladung mit ReadOnlySpan<T>, z.B. String.Format(), String.Join() und Console.Writeline().\nDies basiert auf dem neuen Sprachfeature \"Params Collections\" in C# 13.0, das generische Mengentypen zur Übergabe variadische Parameter bei params erlaubt, was die Geschwindigkeit des Methodenaufrufs verbessern soll. Der C#-Compiler kann die Argumente auf dem Stack speichern, wodurch die implizite Array-Allokation vermieden wird, die sonst angefallen wäre.\nDabei sind folgende generischen Mengentypen bei params in C# 13.0 erlaubt:\nFolgendes Listing zeigt die Params CollectionsF\nDie in .NET 8.0 eingeführte Klasse System.Buffers.SearchValues hat nun in der Methode Create() eine Überladung erhalten, um nicht nur einzelne Zeichen, sondern ganze Zeichenketten schnell in einer anderen Zeichenkette zu suchen, siehe Listing 3:\nFolgender Code zeigt die Erweiterung bei Create() in der Klasse System.Buffers.SearchValues\nIn der Klasse System.Threading.Tasks.Task hat Microsoft die Methoden WhenEach() neu eingeführt, die ein IAsyncEnumerable<Task> liefert und eine foreach-Schleife jeweils durchläuft, sobald ein Ergebnis einer Hintergrundaufgabe bereitsteht. In Listing 4 wird dies verwendet, um den Status von drei HTTP-Anfragen sukzessive zu ermitteln.\nFolgender Code zeigt den Einsatz von WhenEach()\nZudem stellt Microsoft in .NET 9.0 die neue Methode CreateUnboundedPrioritized<T> in der Klasse System.Threading.Channels.Chanel sowie eine neue Klasse TypeName im NuGet-Paket \"System.Reflection.Metadata\" bereit. Details dazu finden sich in den Release Notes.\n\n      (Bild: Dmytro Vikarchuk/Shutterstock)\n    \nIn der Online-Konferenz betterCode() .NET 9.0 am 19. November 2024 von iX und dpunkt.verlag werden .NET-Experten von www.IT-Visions.de den fertigen Stand von .NET 9.0 anhand von Praxisbeispielen präsentieren. Dazu zählen die Neuerungen bezüglich des .NET 9.0 SDK, C# 13.0, ASP.NET Core 9.0, Blazor 9.0, OR-Mapping mit Entity Framework Core 9.0, Windows Forms 9.0, WPF 9.0, WinUI, Cross-Plattform-Entwicklung mit .NET MAUI 9.0 und ein Ausblick auf .NET 10.0.\nDer Ticketverkauf ist bereits gestartet: Vor Bekanntgabe des Programms sind vergünstigte Blind-Bird-Tickets erhältlich.\n.NET MAUI unterstützt nun die Beta 2-Version der Android API-Version 35. Durch Einsatz von LLVM Marshalled Methods soll auf Android eine Leistungsverbesserung von 10 Prozent erreicht werden. Beim zuvor eingeführten Trimming wurden zudem Fehler behoben.\n\n\n(map)\n\n\n\n    montags und donnerstags - alles von heise Developer\n  \n\n    Ausführliche Informationen zum Versandverfahren und zu Ihren\n    Widerrufsmöglichkeiten erhalten Sie in unserer\n    Datenschutzerklärung.\n  \n\nImmer informiert bleiben: Klicken Sie auf das Plus-Symbol an einem Thema, um diesem zu folgen. Wir zeigen Ihnen alle neuen Inhalte zu Ihren Themen.\n\n          Mehr erfahren.\n        \n\n\nExklusive Tests, Ratgeber & Hintergründe. Unbegrenzter Zugriff auf alle heise+ Beiträge inkl. allen Digital-Magazinen.",
    "translation": "Blazor Server provides improved connection recovery, optimized download of static resources, and easier rendering mode queries. (Image: Pincasso/Shutterstock.com) Microsoft has provided the fifth preview version of .NET 9.0 for download. Developers can now easily retrieve render mode for Blazor applications. The Blazor Server provides an improved user experience when restoring connections and downloading static resources has been optimized. In addition, Microsoft has released an update of Visual Studio version 17.11 to Preview 2. There is a greater progress in Blazor Server when restoring connections. Blazor Server is a variant of Blazor where the user interface on the web server is generated and transmitted to the web browser with continuous data exchange via web sockets so that the user gets the experience of a single-page app (SPA) – with the exception of the offline capability that cannot be found in Blazor Server. Microsoft offers in .NET 9.0 not only a revision of the connection loss (see Figure 1), but also of the connection.This is now automatically resumed when the user navigates back to a browser tab. In addition, Microsoft no longer uses linear but exponential intervals to restore a connection. This can be configured as shown in Listing 1. If a connection cannot be restored because Blazor Server has already discarded the state on the web server or the web server process has been restarted (e.g. when replacing the program code), the browser automatically performs a complete reload of the application. This had to start users manually so far. If a reload of the pages has to be done, the state of the application and all form inputs of the user are still lost.In addition, Microsoft has announced that it will be able to use the following features in Microsoft's configuration file. In addition, it will be able to use the following features: In addition, in this year's build conference, \"Modern Full-Stack Web Development with ASP.NET Core & Blazor\" (i.e., the configuration of the configuration for Blazor Server's connection attempts with Blazor Server will be updated to include the current form input of the user when reloading). (Image: Screenshot on Windows 11: Holger Schwichtenberg) The following listing by Microsoft shows the configuration of the intervals for Blazor Server's connection attempts: Since .NET 8.0, Blazor-based browser applications are not only the render modes Blazor Server and Blazor WebAssembly, but also Static Server-Side-Rendering and the Auto-mode, which can be changed from Static Server-Side-Render to Blazor Server and Blazor Server to Blazor Server.Figure 6) and the insertion of e-tags with SHA-256-hash for the versioning of resources. This allows a browser to see if a file in its cache is outdated (see Figure 7). As of .NET 9.0 Preview 5, Microsoft provides a new project template \".NET MAUI Blazor Hybrid and Web App\" (see Figure 8). At the command line, the template is called \"maui-blazor-web\". The new template creates both a blazor web application (where render mode is selectable between \"Static\", \"Server\", \"WebAssembly\" and \"Auto\") and a blazor MAUI application. When selecting \"Auto\", the four projects shown in Figure 9 are created: For blazor-based applications, a simpler option is now available to pass the server-side authentication state to Blazor WebAssembly in the browser.For this there is the new method AddAuthenticationStateSerialization() for the server and AddAuthenticationStateDeserialization() for the client. They are to be called in the start code in Program.cs. By default the name and the roles of the authenticated user are passed by HTML comment (<!--Blazor-WebAssembly-Component-State:eyJfX2ludGVybmFsX19BdXRoZW50aWNdGlvb... -->) from the server to the browser. Optionally, developers can also pass all claims like this: At Entity Framework Core there are only a few minor innovations in Preview 5. The object-relational Mapper (ORM) can now translate the .NET methods TimeOnly.FromDateTime() and TimeOnly.FromTimeSpan() into LINQ-Queries into SQL.In this case, you will find the following example of the command command: The command command will be added to the command number. The command number will be added to the command number. The command number will be added to the command number. The command number will be added to the command number. The command number will be added to the command number. The command number will be added to the command number. The command number will be added to the command number. The command number will be added to the command number. The command number will be added to the command number. The command number will be added to the command number and the command number will be added to the command number. The command number will be added to the command number.November 2024 from iX and dpunkt.verlag will present .NET experts from www.IT-Visions.de the finished stand of .NET 9.0 based on practical examples. These include the innovations regarding the .NET 9.0 SDK, C# 13.0, ASP.NET Core 9.0, Blazor 9.0, OR mapping with Entity Framework Core 9.0, Windows Forms 9.0, WPF 9.0, WinUI, cross-platform development with .NET MAUI 9.0 and an outlook on .NET 10.0. Ticket sales have already started: Before announcing the program, discount blind-bird tickets are available. .NET MAUI now supports the beta 2 version of the Android API version 35. By using LLVM Marshalled Methods, a performance improvement of 10 percent is to be achieved on Android. At the previously introduced trimming, bugs have also been fixed. (map) Mondays and Thursdays - all by heise Developers Detailed information about the shipping procedure and your revocation options are available in our privacy policy. Always remain informed: Click the Plus icon to show your background.Unlimited access to all heise+ posts including all digital magazines.",
    "transformed_representation": [
        ".NET",
        "ASP.NET Core",
        "Blazor",
        ".NET MAUI",
        "Entity Framework Core",
        "C#",
        "Windows Forms",
        "WPF",
        "WinUI",
        "Microsoft",
        "Visual Studio"
    ],
    "detected_language": "de"
}