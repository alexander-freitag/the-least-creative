{
    "title": "Softwaredokumentation: Tipps für mehr Freude und Effektivität",
    "timestamp": "2024-06-11T11:13:00Z",
    "content": "\n\n\n        Vier Experten teilen ihr Wissen darüber, wie Entwickler ihre Software zielgerichteter und weniger mühsam dokumentieren können. Teils kann KI dabei helfen.\n      \n\n      (Bild: Stokkete/Shutterstock.com)\n    \n(This interview is also available in English.)\nSoftwaredokumentation kann nervenzehrend sein – doch das muss sie nicht. iX hat vier Experten zu ihren Erfahrungen und Verbesserungsvorschlägen befragt. Charlotte Scharbert, Alexander Schwartz, Falk Sippach und Dr. Gernot Starke geben Einblicke, wie hilfreich KI-Tools derzeit sind, welche Best Practices Entwicklerinnen und Entwickler anwenden können, welche Fallstricke sie vermeiden sollten und wie sich Dokumentation nahtlos in den Arbeitsalltag integrieren lässt.\n\n          Zunächst im Bereich Softwareentwicklung tätig, wechselte Charlotte dann in den Bereich der Dokumentation und arbeitet nun als technische Dokumentatorin. Ihr Anliegen ist es, das Thema Softwaredokumentation populärer zu machen und zu zeigen, dass Doku nicht aufwendig und lästig sein muss.\n        \n\n          Alexander Schwartz arbeitet als Principal Software Engineer und Maintainer bei Red Hat am Keycloak-Projekt, zusätzlich bringt er Erfahrung als Softwarearchitekt und IT-Berater mit. Privat entwickelt er ebenfalls Open-Source-Software, unter anderem das AsciiDoc-Plug-in für IntelliJ. Auf Konferenzen und bei User Groups spricht er über Java, Kubernetes, Performance, gute Dokumentation und Identity and Access Management.\n        \n\n          Falk Sippach ist Softwarearchitekt, Berater und Trainer bei der embarc Software Consulting GmbH. Er engagiert sich in der Java-Community und teilt sein Wissen in Artikeln, Blogbeiträgen und Vorträgen.\r\n\n        \n\n          Dr. Gernot Starke, INNOQ-Fellow, arbeitet als Coach und Berater für Softwareentwicklung und -architektur. Er ist Mitbegründer und Betreuer der Open-Source-Projekte arc42 und aim42, Buchautor und gelegentlicher Konferenzsprecher. \n        \niX: Die Dokumentation von Software und ihrer Architektur hat den Ruf, nicht sonderlich beliebt zu sein. Was sind dabei eurer Meinung nach die größten Hürden?\nCharlotte Scharbert: Ich denke, ein großes Problem ist, dass es keinen Standard dafür gibt, wie in der Architektur für Grundrisse von Häusern oder in der Elektrotechnik für Schaltpläne. Natürlich haben wir Standards wie UML, die aber kaum genutzt werden und meiner Erfahrung nach nur bedingt dazu geeignet sind, Softwarearchitektur abzubilden. Daher findet man häufig eine wirre Anordnung von \"boxes and lines\", die nach ein paar Monaten niemand mehr richtig versteht, oder in der Projektdokumentation steht einfach nur \"wir verwenden eine hexagonale Architektur\" mit einem Bild aus der Google-Suche – und das war's. Oft wird die Dokumentation erst am Ende eines Projektes erstellt. Dann ist es schwer, sich noch an alles zu erinnern oder nachzuvollziehen, wie etwas aufgebaut ist. Das macht das Dokumentieren langwierig und nervenraubend.\nDazu kommt, dass es wenige Tools gibt, mit denen man schnell und simpel Diagramme erstellen kann, die sich bei Änderungen später einfach anpassen lassen. Meiner Erfahrung nach führen grafische Tools schnell zu Frust, weil Entwicklerinnen und Entwickler keine halbe Ewigkeit Kästchen verschieben möchten. \"Diagrams as code\" ist da ein guter Ansatz, hat meiner Meinung nach aber noch nicht sein volles Potenzial erreicht.\nAlexander Schwartz: Die fehlende wahrgenommene Wertschätzung der Dokumentation ist eine häufige Hürde. Bei Entwicklerinnen und Entwicklern ist Dokumentation immer dann unbeliebt, wenn sie nicht sehen, dass sie gelesen und aktiv genutzt wird. Dort kann man ansetzen: Ein Webtracking-Tool kann zeigen, welche Teile der Dokumentation wie oft aufgerufen werden, während eine Statistik von vermeidbaren Kundenanfragen darauf hinweisen kann, wo Dokumentation fehlt. Eine Softwarearchitektin oder eine Fachabteilung können ihre Wertschätzung gegenüber der Dokumentation zeigen, indem sie sie lesen und Fragen dazu stellen, um das jeweilige System zu verstehen. Man kann sich selbst zum Beispiel fragen, wann man das letzte Mal einen Auszug aus der Dokumentation oder eine Grafik daraus zu einem Planungsmeeting mitgenommen und aktiv damit gearbeitet hat, anstatt das Diagramm neu auf einem Flipchart zu skizzieren. Dokumentation kann eine Investition in die Zukunft sein, doch sie wird manchmal als das Gegenteil wahrgenommen: Man könnte sich fragen, ob man seinen Job verliert, wenn man zu viel dokumentiert. Dabei hilft Dokumentation den Stakeholdern, ein System zu verstehen, und regt zu neuen Ideen an. Und neue Ideen für ein bestehendes System sind eine gute Voraussetzung dafür, den aktuellen Job zu behalten.\nEntwickler klagen oft darüber, überlastet zu sein und keine Zeit zu haben, Dokumentation zu schreiben. Andererseits verbringen sie viel Zeit damit, anderen Teammitgliedern Dinge zu erklären, die sie mit guter Dokumentation nicht erklären müssten. Und wenn Verstärkung ins Team kommt und keine Dokumentation vorhanden ist, dann ist das neue Teammitglied schnell frustriert und wieder weg.\nBei Systemen ohne Dokumentation wird sehr schnell der Rotstift angesetzt. Laut meiner Erfahrung gab es spätestens alle zwei Jahre eine Bestandsaufnahme der verschiedenen Systeme. Wenn niemand erklären kann, wofür das System zuständig ist, wie es funktioniert und welchen Mehrwert es bringt, ist das meist schlecht für die Zukunft des Systems und des Teams. Nur selten gelingt es einem System zu überleben, wenn andere schlichtweg Angst davor haben, es abzuschalten, weil niemand weiß, was es tut.\nManchmal besteht die Hürde für das Schreiben von Dokumentation aus einer Mischung aus fehlender Gewohnheit und hoher kognitiver Belastung – nicht nur für Architekturdokumentation. Hat man das lange nicht mehr getan, fällt es schwer, spontan die passende Dokumentation zu ergänzen, die Teil einer aktuellen Softwareänderung wäre. Zu wenig Struktur oder zu viele Formalismen führen dazu, dass Autoren zu viel über das Drumherum nachdenken müssen, anstatt sich auf das Schreiben der zusätzlichen Abschnitte oder das Erstellen der neuen Diagramme zu konzentrieren. Bei Softwarearchitekten und anderen Stakeholdern ist Dokumentation immer dann unbeliebt, wenn sie nicht aktuell ist. Sie können sie trotzdem aktiv nutzen, sie als Versicherung für die Zukunft bewerben und mit einfachen Strukturen und Werkzeugen ihre Pflege vereinfachen. Außerdem hilft es, mit gutem Beispiel voranzugehen und in Absprache mit den Eigentümern selbst mitzuschreiben. Ich empfehle, die Wissensträger zu interviewen, die Dokumentation selbst anzupassen und die Änderung von den Wissensträgern gegenlesen zu lassen. Damit zeigt man auch seine Wertschätzung für die Dokumentation.\nFalk Sippach: Da gibt es verschiedene Gründe. Zum einen ist Entwicklerinnen und Entwicklern teilweise nicht klar, was sie in welchem Umfang und in welcher Form dokumentieren sollen. Wenn sie sich außerdem zu wenig Gedanken über die Zielgruppe machen und die Inhalte nicht aktuell halten, wird die Dokumentation nicht gelesen. Und damit sinkt die Motivation, sie zu schreiben. Häufig sind auch andere Themen wichtiger, während der Stellenwert der Dokumentation zu gering ist. Und letztlich sind die typischen Dokumentationswerkzeuge zu weit entfernt vom Arbeitsalltag, sodass die Hürden gerade für die Entwickler unnötig hoch sind.\nGernot Starke: Coding und technische Aufgaben machen halt mehr Spaß. Aber diesen Spaßfaktor mal außer Acht gelassen: Teams bekommen teilweise die unspezifische Aufforderung \"Dokumentiert mal was\", wobei insbesondere unklar bleibt, was denn genau zu dokumentieren ist und in welchem Tiefgang. Noch schlimmer: Oftmals bleibt die Zielgruppe der Dokumentation ungenannt – und niemand dokumentiert gerne \"für die Tonne\". Wenn mir als Entwickler oder Entwicklerin klar ist, dass ich eine bestimmte Sache für eine konkrete Person ABC erstelle, habe ich eine viel höhere Motivation, als wenn ich denke, \"das liest ja eh niemand\".\nEin dritter Grund für die Unbeliebtheit könnte hoher Aufwand und Formalismus sein: Gerade UML- oder SysML-Modellierungswerkzeuge haben meiner Ansicht nach teilweise eine schlechte Usability, sodass Dokumentation damit gegenüber leichtgewichtigen Tools wie draw.io wie ein Albtraum erscheint. Zu guter Letzt macht Dokumentation keinen Spaß, wenn die bisherige schlecht oder veraltet ist oder man im Wiki vor lauter Bäumen den Wald nicht mehr sehen kann.\n\n      (Bild: Iltun Huseynli auf Unsplash)\n    \nAuf der Online-Konferenz betterCode() ArchDoc am 30. September dreht sich auch alles um moderne und einfache Softwarearchitektur-Dokumentation. Sprecher sind unter anderem die hier interviewten Charlotte Scharbert, Alexander Schwartz und Gernot Starke, während Falk Sippach als Beirat das Programm mitgestaltete. \nNoch bis zum 8. September gibt es einen Frühbucherrabatt. \n\n    montags und donnerstags - alles von heise Developer\n  \n\n    Ausführliche Informationen zum Versandverfahren und zu Ihren\n    Widerrufsmöglichkeiten erhalten Sie in unserer\n    Datenschutzerklärung.\n  \n\nImmer informiert bleiben: Klicken Sie auf das Plus-Symbol an einem Thema, um diesem zu folgen. Wir zeigen Ihnen alle neuen Inhalte zu Ihren Themen.\n\n          Mehr erfahren.\n        \n\n\nExklusive Tests, Ratgeber & Hintergründe. Unbegrenzter Zugriff auf alle heise+ Beiträge inkl. allen Digital-Magazinen.",
    "translation": "Four experts share their knowledge of how developers can document their software more purposefully and less laboriously. In part, AI can help. (Image: Stokkete/Shutterstock.com) (This interview is also available in English.) Software documentation can be annoying – but it doesn't have to. iX has asked four experts about their experiences and suggestions for improvement. Charlotte Scharbert, Alexander Schwartz, Falk Sippach and Dr. Gernot Starke provide insights into how helpful AI tools are at the moment, which best practices developers can use, which pitfalls they should avoid and how documentation can be seamlessly integrated into everyday work. Initially working in the field of software development, Charlotte then switched to the area of documentation and now works as a technical documentator.Their aim is to make the topic of software documentation more popular and to show that documentation does not have to be complex and annoying. Alexander Schwartz works as a Principal Software Engineer and Maintainer at Red Hat at the Keycloak project, in addition he brings experience as a software architect and IT consultant. He also develops private open source software, including the AsciiDoc plug-in for IntelliJ. At conferences and at User Groups he talks about Java, Kubernetes, performance, good documentation and identity and access management. Falk Sippach is a software architect, consultant and trainer at embarc Software Consulting GmbH. He engages in the Java community and shares his knowledge in articles, blog posts and lectures. Dr. Gernot Starke, INNOQ-Fellow, works as a coach and consultant for software development and architecture.He is co-founder and maintainer of the open source projects arc42 and Aim42, book author and occasional conference speaker. iX: The documentation of software and its architecture has the reputation of not being particularly popular. What do you think are the biggest hurdles? Charlotte Scharbert: I think a big problem is that there is no standard for it, as in the architecture for floor plans of houses or in electrical engineering for schematics. Of course we have standards like UML, which are hardly used and, in my experience, are only partially suitable for depicting software architecture. Therefore, one often finds a confused arrangement of \"boxes and lines\", which after a few months nobody understands correctly, or in the project documentation stands simply \"we use a hexagonal architecture\" with an image from the Google search – and that's it.Often the documentation is created only at the end of a project. Then it is difficult to remember everything or to understand how something is built up. This makes documenting lengthy and annoying. In addition, there are few tools that can be used to quickly and easily create diagrams that can be easily adapted later on when making changes. In my experience, graphical tools quickly lead to frustration because developers don't want to move half an eternity boxes. \"Diagrams as code\" is a good approach, but in my opinion has not yet reached its full potential. Alexander Schwartz: The lack of perceived appreciation of the documentation is a common hurdle.For developers, documentation is always unpopular when they don't see it being read and actively used. You can start there: A web tracking tool can show which parts of the documentation are called as often as a result, while a statistic of avoidable customer requests can indicate where documentation is missing. A software architect or a specialist department can show their appreciation for the documentation by reading and asking questions about it to understand the respective system. For example, you can ask yourself when you last took an excerpt from the documentation or a graphic from it to a planning meeting and worked actively with it instead of sketching the diagram on a flipchart. Documentation can be an investment in the future, but it is sometimes perceived as the opposite: you might wonder if you lost your job if you documented too much.In doing so, documentation helps stakeholders to understand a system and stimulates new ideas. And new ideas for an existing system are a good prerequisite for keeping the current job. Developers often complain about being overloaded and not having time to write documentation. On the other hand, they spend a lot of time explaining things to other team members that they don't have to explain with good documentation. And if reinforcements come into the team and no documentation is available, then the new team member is quickly frustrated and gone again. In systems without documentation, the red pencil is set very quickly. According to my experience, at least every two years there was an inventory of the different systems.If no one can explain what the system is responsible for, how it works and what added value it brings, this is usually bad for the future of the system and the team. Only rarely can a system survive when others are simply afraid of switching it off because no one knows what it is doing. Sometimes the hurdle for writing documentation consists of a mixture of lack of habit and high cognitive stress – not only for architectural documentation. If you haven't done this for a long time, it's hard to spontaneously supplement the appropriate documentation that would be part of a current software change. Too little structure or too many formalisms mean that authors have to think too much about the round about it instead of focusing on writing the additional sections or creating the new diagrams. For software architects and other stakeholders, documentation is always unpopular when it's not up-to-date.They can still actively use them, apply them as insurance for the future and simplify their care with simple structures and tools. In addition, it helps to lead by example and write along with the owners themselves in consultation with them. I recommend interviewing the knowledge providers, adapting the documentation themselves and having the change read back by the knowledge providers. This also shows his appreciation for the documentation. Falk Sippach: There are various reasons. On the one hand, developers are partly not clear what they should document to what extent and in what form.Furthermore, if they think too little about the target group and don't keep the content up-to-date, the documentation will not be read. And thus the motivation to write it decreases. Often, other topics are more important, while the importance of the documentation is too small. And ultimately, the typical documentation tools are too far away from everyday work, so that the hurdles are unnecessarily high for the developers. Gernot Starke: Coding and technical tasks are more fun. But this fun factor is not taken into account: Teams sometimes get the unspecific invitation \"Document what\" whereby in particular it remains unclear what exactly is to be documented and in what depth.Even worse: often the target group of the documentation remains unnamed – and nobody likes to document \"for the ton\". If I as a developer is clear that I create a specific thing for a specific person ABC, I have a much higher motivation than if I think \"that reads anyway no one\". A third reason for the unpopularity could be high effort and formalism: Especially UML or SysML modeling tools, in my opinion, have a bad usability in part, so that documentation seems like a nightmare compared to light weighty tools such as draw.io. Last but not least, documentation is not fun if the previous bad or outdated or you can no longer see the forest in the wiki in front of trees. (Image: Iltun Huseynli on Unsplash) At the online conference betterCode() ArchDoc on September 30th, everything revolves around modern and simple software architecture documentation. Speakers are among other things the Charlotte Scharbert, Alexander Schwartz and Gernot Starke interviewed here, while Falk Sippach designed the program as an advisory board.There is an early booking discount until September 8th. Mondays and Thursdays - everything from heise Developer You will receive detailed information about the transit procedure and your revocation options in our privacy policy. Stay informed: Click on the plus icon on a topic to follow it. We will show you all new content on your topics. Learn more. Exclusive tests, guides & backgrounds. Unlimited access to all heise+ posts incl.all digital magazines.",
    "transformed_representation": [
        "software documentation",
        "AI",
        "software development",
        "technical documentation",
        "documentation tools",
        "software architecture",
        "documentation best practices",
        "documentation pitfalls"
    ],
    "detected_language": "de"
}